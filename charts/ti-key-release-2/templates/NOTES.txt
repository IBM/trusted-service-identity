This helm chart installs environment for Trusted Identity
  Namespace enabled: {{- include "namespace" . | indent 4}}

  app: {{ template "ti-key-release.name" . }}
  app.version: {{ .Chart.AppVersion }}
  chart: {{ template "ti-key-release.chart" . }}
  release: {{ .Release.Name }}

  # Typically, the sub-chart values should be retrieved directly,
  # however, there is a problem with retrieving values that contain "-"
  # see the helm issue: https://github.com/helm/helm/issues/2192
  This chart tiVersion: {{ .Chart.AppVersion }}

    vaultAddress: {{ index .Values "ti-key-release-1" "vaultAddress" }}
    cluster.name: {{ index .Values "ti-key-release-1" "cluster" "name" }}
    cluster.region: {{ index .Values "ti-key-release-1" "cluster" "region" }}
    jwt.expireSec: {{ index .Values "ti-key-release-1" "jwt" "expireSec" }}
    secrets.refreshSec: {{ index .Values "ti-key-release-1" "secrets" "refreshSec" }}
    jssService.type: {{ .Values.jssService.type }}
    debug: {{ .Values.debug }}

Before proceeding, please refer to the README.md to perform bootstrapping of TSI.

To execute a test, create a new namespace, load the application secrets to vault,
then deploy the test application:

    kubectl create ns test
    examples/vault/demo.secret-maker.sh -f examples/myubuntu.yaml -n test > myubuntu.secrets.sh
    # update the myubuntu
    chmod +x myubuntu.secrets.sh
    ./myubuntu.secrets.sh
    kubectl create -f examples/myubuntu.yaml -n test
Then check if the secret is available:
    kubectl -n test exec -it $(k -n test get pods | grep myubuntu | awk '{print $1}' ) -- cat /tsi-secrets/mysecrets/mysecret4
